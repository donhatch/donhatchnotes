References:
- Tello SDK 1.3.0.0 User Guide https://dl-cdn.ryzerobotics.com/downloads/tello/20180910/Tello%20SDK%20Documentation%20EN_1.3.pdf
  - this is the latest for the basic Tello drone
- Tello SDK 2.0 User Guide https://dl-cdn.ryzerobotics.com/downloads/Tello/Tello%20SDK%202.0%20User%20Guide.pdf
  - requires EDU (or Talent?)
  - value added: swarming stuff
- Tello SDK 3.0 User Guide https://dl.djicdn.com/downloads/RoboMaster+TT/Tello_SDK_3.0_User_Guide_en.pdf
  - Requires EDU or Talent (more expensive Tello drone)
  - value added: motoron/motoroff (although these can be simulated
    with secret send_rc_control commands)

- developer wiki
  https://tellopilots.com/wiki

Describes the binary UDP protocol (reverse engineered):
  https://gobot.io/blog/2018/04/20/hello-tello-hacking-drones-with-go/

More complete details about the low-level protocol:
  https://tellopilots.com/wiki/protocol/
  (however, the part about the packet size seems to be wrong)

High-level observations:
  - there isn't one api or way of doing things; there are several,
    and none of them works very well :-(
  - the tello has a bug that makes it always send "ok"s (and "error"s etc.) to the first
    address/port that sent it a command.  Therefore, it's good to always use an explicit port
    to send commands from, and always use the same one.  I use 7777 in the examples below.
  - motor shuts off when battery is down to 10%, but wifi and video still works til down to 2%
  - tello shuts off when temperature too high (templ? temph? avg of the two): typical last temperature before shutdown is templ,temph = 93,96 or 92,96 or 93,96)

WIRESHARK:
- note that tshark can be clearer and easier to use in some cases (tcpdump seems roughly equivalent but doesn't recognize the wireshark dissectors)
  - I had to add myself to group wireshark, which takes effect on next X session I think
    (and maybe not even that-- if for some reason I'm not in the group in this shell, use `sg wireshark wireshark` or `sg wireshark tshark`)
  - wireshark dissectors here:
       git clone https://bitbucket.org/PingguSoft/pytello.git
    - it has tello.lua and tello2.lua
    - put *one* of them into /home/donhatch/.local/lib/wireshark/plugins/._
    - don't install them both; they will get an error "/home/donhatch/.local/lib/wireshark/plugins/tello2.lua:24: attempt to call global 'message' (a nil value)"
    - tello2.lua seems to be the more sophisticated one, but source code is harder to read,
      and doesn't highlight the correspondences between specific bytes and fields correctly like tello.lua does
    - its SIZE is in bits; divide it by 8 to get bytes
       (all the protocol info pages are wrong; bytes 1-2 little endian is simply the size *in bits*)

NOTES ON CONTROLLING USING SOCAT (and other programs):

  Note that all the programs and libraries are haphazard
  (some connect from local port number 8889, same as tello port, wtf?
   and some connect from local port 8890, which is the state recieving port, wtf? but luckily that's
   what punched through the firewall initially so state packets can come through, which enabled me to see what's going on)
  And none of them are cognizant of the bug that makes the tello send all replies to its first client connection.
  So I try to not use any of them, and I try to do things more directly,
  and always connect from a consistent port (I chose 7777).

  On my computer, I have to allow necessary traffic through the firewall
  (if I don't do this, I get bizarre haphazard behavior such as 8890 punches through firewall when a program binds to local 8890 for the outgoing command):
    sudo ufw status
    sudo ufw allow 8890/udp
    sudo ufw allow 11111/udp
    sudo ufw status
  Then when done:
    sudo ufw status
    sudo ufw delete allow 11111/udp
    sudo ufw delete allow 8890/udp
    sudo ufw status
  To play the 30fps video stream (the sleep .1 is necessary so the two commands are sent in two different UDP packets):
    (echo -n command; sleep .1; echo -n streamon) | socat - UDP4:192.168.10.1:8889,bind=:7777
    ffplay -probesize 32 -analyzeduration 0 -flags low_delay -framedrop -i udp://@:11111 -framerate 60
  ('-probesize 32' is needed to reduce lag from 8s to .5s, and for the following other flags to work;
   `-analyzeduration 0` makes it start up immediately;
   `-flags low_delay` makes delay .1 secs or so instead of .5 secs)
   `-framedrop` is just something suggested by the following page, not sure if it's helpful)
   use `framerate 60` instead of 30 so that, if there is initial lag, it will not stay.  seems to make it so that, even without -probesize 32, it catches up to low lag)
   Got all this esoterica from:
      https://stackoverflow.com/questions/16658873/how-to-minimize-the-delay-in-a-live-streaming-with-ffmpeg#answer-49273163

  To turn the video stream off:
    echo -n streamoff | socat - UDP4:192.168.10.1:8889,bind=:7777
  You can send streamon and streamoff while ffplay is playing, and it will pause and resume the video.

  In general, an socat session can be started, and commands typed into it.
  E.g. to take off and land:
    socat - UDP4:192.168.10.1:8889,bind=:7777
      type in: command<ctrl-d>
      reply "ok" comes back immediately
      type in: takeoff<ctrl-d>
      takes off, reply "ok" comes back in a couple of seconds
      type in: land<ctrl-d>
      takes off, reply "ok" comes back when landed
  Can script that sequence in an unprincipled way, guessing when the takeoff has finished (it doesn't always work):
    (echo -n command; sleep .1; echo -n takeoff; sleep 5; echo -n land) | socat - UDP4:192.168.10.1:8889,bind=:7777
  TODO: script it to wait for the "ok" instead of sleeping 5. 
  Can also just do the commands separately; here's a clunky way:
      echo -n command | socat -t10 - UDP4:192.168.10.1:8889,bind=:7777
      echo -n takeoff | socat -t10 - UDP4:192.168.10.1:8889,bind=:7777
      echo -n land | socat -t10 - UDP4:192.168.10.1:8889,bind=:7777
  No that isn't it, the -10 makes it wait 10 seconds even after the ok.
  I want it to wait for the ok and then exit immediately afterwards! (note that the "command" often gives 1 or sometimes maybe 2 binary replies before the ok)
    So at this point, maybe a script is what's needed? not sure

  Once command mode has been initiated, a state packet will be coming in to port 8890 every .1 seconds.
  To read it continuously, any of the following will work:
      socat STDIO UDP4-LISTEN:8890,fork   # to make it persist through several tellor power cycles in which tello may change its port
      socat STDIO UDP4-LISTEN:8890
      socat STDIO UDP4-RECV:8890
  To read just one state packet (this seems to work with RECVFROM but not RECV nor LISTEN):
      echo -n command | socat -t.1 - UDP4:192.168.10.1:8889,bind=:7777
      socat -t0 STDIO UDP4-RECVFROM:8890

  USEFUL ALIASES:
      function tello_allow() { sudo ufw status && sudo ufw allow 8890/udp && sudo ufw allow 11111/udp && sudo ufw status; }
      function tello_unallow() { sudo ufw status && sudo ufw delete allow 8890/udp && sudo ufw delete allow 11111/udp && sudo ufw status; }
      function tello() { echo -n "$@" | socat -t.1 - UDP4:192.168.10.1:8889,bind=:7777; }
      function tello_state() { tello "command"; socat STDIO UDP4-LISTEN:8890,fork; }
      function tello_video() { ffplay -probesize 32 -analyzeduration 0 -flags low_delay -framedrop -i udp://@:11111 -framerate 60; }  # to turn it on and off from another window: tello streamon; tello streamoff

    TODO: think about: the .1 isn't right in general; e.g. "land" can take a while to get the "ok" so .5 works well, but rc doesn't even give an "ok";
     maybe two aliases?  tello_no_reply, tello_wait_for_ok_up_to_10_seconds)
    Q: what's a neat alias for doing several commands, separated by sleep? E.g.:
      (echo -n command; sleep .1; echo -n streamon) | socat - UDP4:192.168.10.1:8889,bind=:7777
       Also commands may or may not want to wait for "ok".  (most commands get reply "ok" but "rc" and "emergency" and probably some others don't)
    PA: Here's an idea: how about a function or program whose args are commands, with "ok" meaning "wait for ok" (up to 10s maybe) and numbers meaning sleep for that amount of time;
        maybe "command" should always be first unless overridden?

  IDLING:
    (Using the above alias)
    To motoron the tello, into "high idle", without taking off:
        tello "command"
        tello "rc 0 0 0 0"  # seems necessary if previously landed or emergency'd when in high idle
        tello "rc -100 -100 -100 100"
    then to switch to "low idle":
        tello "rc 0 0 0 0"
        echo -n "rc 0 0 0 0" | socat -t.1 - UDP4:192.168.10.1:8889,bind=:7777
    The following seems to put it immediately into low idle, although I'm not sure it's reliable.
        (echo -n "rc -100 -100 -100 100"; sleep .25; echo -n "rc 0 0 0 0") | socat -t.1 - UDP4:192.168.10.1:8889,bind=:7777
    (empirically: sleep .2: too short so doesn't do anything, sleep .25: seems to work; sleep .35: just on border of starting high, sleep longer: starts high then switches to low)
    (and I think the very first time of doing "rc -100 -100 -100 100" after turning on tello, it takes longer)
    To motor off, either of the following will work:
        tello "land"
        tello "emergency"
    (In general, "land" has seemed to be safer than "emergency" since it won't just drop it out of the sky;
    if not flying, they seem to be essentially the same, except "land" gets an "ok" and "emergency" doesn't):

    So, seems to be a weird state machine:
        States (after "command"):
            START
              "rc -100 -100 -100 100" -> HIGH_IDLE
              "rc 0 0 0 0" -> START (no change)
              "land" or "emergency" -> START (no change), but "land" gives "ok" if motor is on and "error" if not, "emergency" gets no reply
            HIGH_IDLE
              "rc -100 -100 -100 100" -> HIGH_IDLE (no change)
              "rc 0 0 0 0" -> LOW_IDLE
              "land" or "emergency" -> OFF_AND_BAD
            LOW_IDLE
              "rc 0 0 0 0" -> LOW_IDLE (no change)
              "rc -100 -100 -100 100" -> BRIEF HIGH_IDLE, THEN OFF_AND_BAD
              "land" or "emergency" -> START
            OFF_AND_BAD:
              "rc -100 -100 -100 100" -> OFF_AND_BAD (no change)
              "rc 0 0 0 0" -> START
              "land" or "emergency" -> OFF_AND_BAD (no change)
    So:
      - to reliably get to START, do "land"-or-"emergency" and "rc 0 0 0 0" in either order
          tello "command"; tello "land"; tello "rc 0 0 0 0"
      - to get from LOW_IDLE to stable HIGH_IDLE, the only way I know to do it is to go through START,
        which turns off motor briefly (wierd!):
          tello "land"; tello "rc -100 -100 -100 100"


   

Possible APIs to use:
  - damiafuentes/DJITelloPy
    - pip install djitellopy  (or PYTHONPATH to get dev version)
    - I'm hacking on a test script example0.py
    - it has a sample app that uses keys (maybe use that as base)
    - I haven't got get_frame_read() to work yet; it just hangs
      (something to do with public vs private network?)
    - Oh! https://gitmetadata.com/repo/damiafuentes/DJITelloPy/issues/91
      suggests maybe use python3.8 instead of python3.9 ?
      Argh:
	python3.8 ./example0.py 
	  ModuleNotFoundError: No module named 'djitellopy'
	PYTHONPATH=/home/donhatch/gitrepos/DJITelloPy:${PYTHONPATH} python3.8 ./example0.py 
	  ModuleNotFoundError: No module named 'av'
        pip install av
          Requirement already satisfied: av in /home/donhatch/.local/lib/python3.9/site-packages (8.1.0)
          (but that's not 3.8!)
        python3.8 -m pip install av
          ModuleNotFoundError: No module named 'distutils.util'
          ... and can't find python3.8-distutils anywhere :-(
      Let's try cloning the repo, from PyAV-Org/PyAv
	PYTHONPATH=/home/donhatch/gitrepos/DJITelloPy:/home/donhatch/gitrepos/PyAV:${PYTHONPATH} python3.8 ./example0.py 
          File "/home/donhatch/gitrepos/PyAV/av/__init__.py", line 9, in <module>
              from av._core import time_base, pyav_version as __version__, library_versions
          ModuleNotFoundError: No module named 'av._core'
      trying to followinstrs in HACKING.rst, for a somewhat legit dev install:
            ERROR: libx264 not found
        sudo apt install x264
      argh, still get:
        ERROR: libx264 not found
      :-(
      This is just terrible!
      Still trying...
        sudo apt install libavutil-dev
	PYTHONPATH=/home/donhatch/gitrepos/DJITelloPy:${PYTHONPATH} python3.8 ./example0.py 
	  ModuleNotFoundError: No module named 'av'
      Hmm I think python3-pip is supposed to do all versions,
      but it doesn't?
      This: https://stackoverflow.com/questions/63207385/how-do-i-install-pip-for-python-3-8-on-ubuntu-without-changing-any-defaults#answer-67045100
      suggests uninstalling python3-pip and python-pip,
      and removing the old pip files from /usr/local/bin (I ignored this),
      and reinstalling python3-pip using apt,
      and adding $HOME/.local/bin to $PATH
        sudo apt remove python3-pip
          The following packages will be REMOVED:
            python3-pip python3-virtualenv virtualenv
        sudo apt install python3-pip
        python3.8 -m pip
          ModuleNotFoundError: No module named 'distutils.util'
      trying advice here: https://stackoverflow.com/questions/63207385/how-do-i-install-pip-for-python-3-8-on-ubuntu-without-changing-any-defaults/66498520#answer-69087410
        cd ~/tmp
        wget https://bootstrap.pypa.io/get-pip.py
        python3.8 ./get-pip.py
            File "/tmp/tmp_bbj2kvh/pip.zip/pip/_internal/locations/_distutils.py", line 9, in <module>
            ModuleNotFoundError: No module named 'distutils.cmd'
      I give up :-(
      Can I fix it using a virtual environment? https://docs.python.org/3/tutorial/venv.html
        python3.8 -m venv ~/tmp/tutorial-env
          ... please run apt-get install python3-venv
        sudo apt install python3-venv
        sudo apt install python3.8-venv
        python3.8 -m venv ~/tmp/tutorial-env
           ... same thing :-(
        sudo apt install virtualenv
        cd ~/tmp
        virtualenv -p python3.8 tutorial-env
      WHOA THAT SEEMED TO WORK
        source tutorial-env/bin/activate
        cd ~/gitrepos/djitellopy_experimenting
        python3.8 example0.py
          ModuleNotFoundError: No module named 'djitellopy'
        pip install djitellopy
          ModuleNotFoundError: No module named 'distutils.util'
        python3.8 -m pip install djitellopy
          ModuleNotFoundError: No module named 'distutils.util'
      ARGH!
        sudo mv /usr/lib/python3.8/distutils /usr/lib/python3.8/distutils.BAD
        sudo cp -a /usr/lib/python3.9/distutils /usr/lib/python3.8/.

        (still in the virtualenv ...)
        python3.8 -m pip install djitellopy
        got further, but...
	  File "/usr/lib/python3.8/distutils/sysconfig.py", line 156, in get_python_lib
	    libdir = sys.platlibdir
	  AttributeError: module 'sys' has no attribute 'platlibdir'
      fooey. restoring...
        sudo /bin/rm -rf /usr/lib/python3.8/distutils /usr/lib/python3.8/distutils
        sudo mv /usr/lib/python3.8/distutils.BAD /usr/lib/python3.8/distutils
      that was so close, though!
      someone said I could do that, if I could find a 3.7 distutils, hm.

      ok let's install python3.7
        sudo apt install python3.7
      blech! it makes a useless skeleton /usr/lib/python3.7/distutils too!

      Let's try copying from 3.9 again and see if I can hack past the sys.platlibdir thing
      (since sys.platlibdir is just 'lib' for me, I think)
        sudo mv /usr/lib/python3.8/distutils /usr/lib/python3.8/distutils.BAD
        sudo cp -a /usr/lib/python3.9/distutils /usr/lib/python3.8/.
        python3.8 -m pip install djitellopy
	  File "/usr/lib/python3.8/distutils/sysconfig.py", line 156, in get_python_lib
	    libdir = sys.platlibdir
	  AttributeError: module 'sys' has no attribute 'platlibdir'
        sudo vi /usr/lib/python3.8/distutils/sysconfig.py
          hardcoded it to just use 'lib'
          also did same to /usr/lib/python3.8/distutils/command/install.py
      huh, it seemed to work!
        python3.8 example0.py
          File "/home/donhatch/tmp/tutorial-env/lib/python3.8/site-packages/djitellopy/tello.py", line 11, in <module>
            import cv2 # type: ignore
          ModuleNotFoundError: No module named 'cv2'
        pip install opencv-python
        python3.8 -m pip install opencv-python
        sudo apt install python-opencv
          nope.
	PYTHONPATH=/home/donhatch/gitrepos/DJITelloPy:${PYTHONPATH} python3.8 ./example0.py 
          ModuleNotFoundError: No module named 'av'
        pip install av
        PYTHONPATH=/home/donhatch/gitrepos/DJITelloPy:${PYTHONPATH} python3.8 ./example0.py 
          ModuleNotFoundError: No module named 'av'
        python3.8 -m pip install av
        PYTHONPATH=/home/donhatch/gitrepos/DJITelloPy:${PYTHONPATH} python3.8 ./example0.py 
          ModuleNotFoundError: No module named 'av'
            File "/home/donhatch/gitrepos/DJITelloPy/djitellopy/tello.py", line 14, in <module>
                import av
            ModuleNotFoundError: No module named 'av'
      wtf???


  - or can do udp stuff directly, from SDK reference
    - http://wiki.ros.org/tello_driver has an overview of what's available.
      it says "The [TelloPy](https://github.com/hanyazou/TelloPy) library is used at this moment since it offers more functionalities than the official Tello SDK or any other unofficial library."
  - hanyazou/TelloPy  (as recommended in previous)
    - pip install tellopy  (or PYTHONPATH to get dev version)
    - examples/simple_takeoff.py doesn't seem to work -- wait_for_connection() hangs
    - when I comment that out, it takes off and lands, but the "down" command doesn't work.
    - seems to use a reverse-engineered protocol rather than the documented udp interface.
      I haven't seen it working well though (other than takeoff and land)
      In fact, I can't even see that the "down" command is doing anything (snooping using strace)

  - dji-sdk/Tello-Python
    - I think this might be examples of just using udp directly?
    - this is where I got tello_state.py which works more reliably than anything else, and in fact clears bad state
    - Q: can I get video from it?
      PA: same problem as with damiafuentes/DJITelloPy above:
          self.socket_video.recvfrom(2048) hangs. something about public vs private network?
          https://tellopilots.com/threads/commands-work-but-not-listening-to-state-and-video.2862/#js-post-14724 suggests maybe:
            "if you set the wlan of the Tello as "private" in network properties, it should not be necessary to open [firewall] ports"
          also: "in station mode you get no video stream.  this is a restriction of tello firmare - nothing you can configure in your network or firewall".
          Q: so, what is station mode??
          A: "station mode is when the tello acts like a router"
             seems to be controlled by the "ap" command, in SDK 2.0 which I don't have. seems to be for swarm programming.
    - dependencies:
      - sudo apt install python3-pil python3-pil.imagetk
      - bleah, Tello_Video example is failing with: ModuleNotFoundError: No module named 'Tkinter'
    - but, can get further using virtualenv (but don't pip install djitellopy in it, that botches things)
        virtualenv ~/tmp/env2
        source ~/tmp/env2/bin/activate
        # and pip install these things that `cd ~/gitrepos/Tello-Python/Tello_Video; python3 ./main.py` errs on
        pip install numpy
        pip install pillow  # for PIL
        pip install tk
        python3 ./main.py
          ModuleNotFoundError: No module named 'Tkinter'
      dammit! maybe didn't get further
      Oh wait!  Tkinter has been renamed tkinter in python3!  So just change the source code
        python3 ./main.py
          ModuleNotFoundError: No module named 'cv2'
        pip install cv
        python3 ./main.py
          ModuleNotFoundError: No module named 'cv2'
        pip install opencv-python
        python3 ./main.py
	    File "/home/donhatch/gitrepos/Tello-Python/Tello_Video/tello.py", line 5, in <module>
	      import libh264decoder
	  ModuleNotFoundError: No module named 'libh264decoder'
      per http://www.lib4dev.in/info/hisazumi/TelloVideoBP/212765505
        git clone https://github.com/DaWelter/h264decoder.git
        cd h264decoder
        mkdir build
        cd build
        cmake ..
          (fails)
      trying to hack through it...
        pip install pybind
          (fails, in a failing loop, it seems, trying older and older versions, failing with "ModuleNotFoundError: No module named 'pip.req'" each time)
        pip install -U pip-tools # as recommended somewhere
          (that upgraded it from 20.something to 21.something)
        pip install pybind
          (fails in same way)
      ok trying commending out all the libh264decoder related stuff
        python3 ./main.py
          it brings up a little ui!




  - hybridgroup/gobot
      per https://github.com/hybridgroup/gobot/tree/master/platforms/dji/tello
        sudo apt install golang
        go get -d -u gobot.io/x/gobot/...  # not sure what this did
        cat > example_from_tello_readme.go
          ... paste example from that page ...
        go run example_from_tello_readme.go
          example_from_tello_readme.go:7:2: found packages gobot (adaptor.go) and main (example_from_tello_readme.go) in /home/donhatch/gitrepos/gobot
      (huh? no idea what that did or how to proceed)
      there's a more detailed howto here (same thing on these two pages I think)
        http://protello.com/en/gobot-programming-tello-en/
        https://blog.tarkalabs.com/automating-dji-tello-drone-using-gobot-2b711bf42af6
      example is called automate_tello.go
        ...
        go run automate_tello.go
          automate_tello.go:13:2: found packages gobot (adaptor.go) and main (automate_tello.go) in /home/donhatch/gitrepos/gobot
      useless :-(

 



TODO: find out what port the android apps use for control, if possible.
TODO: find out what port the android apps use for control, if possible.
TODO: minimal cli recipe/script for switching wifi connection on my laptop
TODO: get a second wifi connection on my laptop
TODO: some kind of wireshark thing for android so I can snoop on the apps
TODO: come up with very convenient CLI
      - what API?  just socat?
TODO: experiment with 'emergency' command
      - seems to work, but djitellopy library expects response which doesn't come
      - pretty ungraceful; "land" might be better in almost all circumstances
TODO: can I override (e.g. with "emergency" or "land") from a second script?

From the SDK manual https://dl-cdn.ryzerobotics.com/downloads/tello/20180910/Tello%20SDK%20Documentation%20EN_1.3.pdf :
State:
   o pitch: Attitude pitch, degree
   o roll: Attitude roll, degree
   o yaw: Attitude yaw, degree
   o vgx: Speed x,
   o vgy: Speed y,
   o vgz: Speed z,
   o templ: Lowest temperature, celcius degree
   o temph: Highest temperature, celcius degree
     (note that get_temperature() in some apis just return avg of templ and temph)
   o tof: TOF distance, cm
       "time-of-flight distance"?
       = current distance to ground
   o h: Height, cm
       = height above starting point
   o bat: Current battery percentage, %
   o baro: Barometer measurement, cm
   o time: Motors on time,
   o agx: Acceleration x,
   o agy: Acceleration y,
   o agz: Acceleration z,

QUESTIONS:
Q: how do I switch wifi from command line?
PA:
    nmcli connection
    nmcli d wifi connect TELLO-F00179
    nmcli d wifi connect freeman
Q: wtf, I can't set the wifi name password?  and I think that's necessary for video??  (no, it isn't, problem was firewall)
Q: isn't UDP completely unsuitable for this? it's doing request/reply stuff, so when a packet is dropped, recovery (if any) takes many seconds;
   that seems unacceptable. ??
Q: using damiafuentes/DJITelloPy, sometimes it gets in a bad state where it
   just hangs trying to execute tello.connect();
   it says:
     in example0.py
     [INFO] tello.py - 122 - Tello instance was initialized. Host: '192.168.10.1'. Port: '8889'.
     [INFO] tello.py - 437 - Send command: 'command'
     [INFO] tello.py - 461 - Response command: 'ok'
     Traceback (most recent call last):
       File "/home/donhatch/gitrepos/djitellopy_experimenting/./example0.py", line 27, in <module>
         tello.connect()
       File "/home/donhatch/.local/lib/python3.9/site-packages/djitellopy/enforce_types.py", line 54, in wrapper
         return func(*args, **kwargs)
       File "/home/donhatch/.local/lib/python3.9/site-packages/djitellopy/tello.py", line 546, in connect
         raise Exception('Did not receive a state packet from the Tello')
     Exception: Did not receive a state packet from the Tello
   How do I get it out of that state??
PA: running the tello_state.py script from the Tello-Python github repo
seems to get it out of that bad state so that this script works.
A: that was because the firewall was rejecting the state packets which to to port 8890,
   until some other program with its shoelaces tied together actually sent a request from port 8890,
   which punched a hole through the firewall.
   Just open ports 8890 and 11111 instead, and all is good.

Q: (damiafuentes/DJITelloPy) for each of the query commands, it says "get_..." is usually faster.
   is that because the get commands read the cached value
   that's polled every .1s?
A: yes, the source code says it just returns get_state_field(...)

Sun Jan 16 11:48:23 AM PST 2022
  using wireshark to see why my example0.py fails with that "raise Exception('Did not receive a state packet from the Tello')"
  until I run fix0.py.

  Observation:
    - (~/tmp/cleangood.pcapng I think)
      when I first turn on the tello and connect to it, and it's in a good state (i.e. example0.py works),
      nothing is being transferred at first; the thing that initiates traffic is
      a UDP from 192.168.10.1:8889 -> 192.168.10.3:8889 , saying "command"
      Then:
        - three packets from .1:8889 to .3:8889:
            35 bytes:
              cc  - header: always 0xcc
              18 01 - packet size: 13-bit total packet size
                      - hmm, https://gobot.io/blog/2018/04/20/hello-tello-hacking-drones-with-go/
                        says it should be ([2]<<8) | ([1]>>3) = 256 + 3 = 259 wrong!
                      - and https://tellopilots.com/wiki/protocol/
                        says it should be
                          buffer[1] + ((buffer[2]<<8)>>3) = 0x18 + (0x1<<8)>>3 = 24 + 32 = 56, wrong
                      - but maybe it should be: ([1]>>3) | ((buffer[2]<<8)>>3) = 3 + 32 = 35, correct!
                                               = (([1]>>3)+([2]<<5))
                                               = ([1]+([2]<<8))>>3
                                               = ([1]+([2]<<8)) / 8  and yeah, that's what tello.lua does.  I guess a simple way of thinking about it is that it's the little-endian number of bits rather than bytes
              b9 - crc-8: crc from header to packet size
              88 - packet type info: bits are: F|T|TYP|SUB ("see below")
              56 00 - message id: little-endian ("see below")
              a6 01 - sequence no.: little-endian - either 0 for some types, or ascending for others
              00 00 00 00 00 00 00 00 00 00 00 00 46 00 00 92 0f 00 06 00 00 00 00 00 8c a2
            2 bytes:
              ok
            13 bytes:
              cc
              68 00    # this one makes sense:  0x68>>3 = 104/8 = 13
              51
              88
              1a 00
              2e 00
              5a 00
              a0 74
          - here's the dump from pinggusoft's tello.lua   (gets size right, but doesn't decode CMD=86=TELLO_CMD_STATUS)
	      TELLO_CMD : 35
		  SOP:  0xCC
		  LEN:  35
		  CRC8: 0xB9
		  PACT: 0x88 <- FROM DRONE
		  CMD:  0x0056 = 86              [i.e. "Flight Status" according to https://tellopilots.com/wiki/protocol/ ]
		  SEQ:  0x01A6 = 422
		  DATA: 000000000000000000000000460000920f00060000000000
		  CRC16: 0xA28C
          - here's the dump from pinggusoft's tello2.lua
              TELLO_CMD
                SOP   : 0xcc
                SIZE  : 280                        [in bits!]
                CRC8  : 0xb9
                PACT  : 0x88
                DIR   :  <- FROM DRONE
                CMD   : TELLO_CMD_STATUS (86)
                SEQ   : 422
                DATASZ: 24
                DATA  : 00 00 00 00 00 00 00 00 00 00 00 00 46 00 00 92 0f 00 06 00 00 00 00 00
                CRC16 : 0xa28c
          - what a train wreck :-(
            note, I'm doing some more hacking on tello2.py so it says:
                SIZE_BITS: 280
                SIZE_BYTES: 280
        - another "command" from .3 to .1

      After any kind of traffic,
      tell starts sending state packets to port 8890 every .1 seconds-- strange!  Even if no program ever used port 8890.


