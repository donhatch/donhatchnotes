https://rpominov.github.io/kefir/

I think this is the functional reactive programming library I want.
  - sane, unlike rxjs
  - fast, unlike baconjs

Q: I typed this example from the doc:
      var stream = Kefir.interval(1000, 1);
      stream.log();
   It's now outputting this every second:
     [interval] <value> 1
   How do I stop it??
A: (found by autocompleting `stream.` in console)
     stream._emitEnd()

Q: Okay then, how do I stop this one?
     var start = new Date();
     var stream = Kefir.fromPoll(1000, () => new Date() - start);
     stream.log();
   It seems to be logging *two* streams: an [interval] and a [fromPoll].
A: Oh wait, no it wasn't!
   I must have done the previous `interval` example,
   then clobbered the variable.

Q: Can I implement my canonical first example? That is:
   One observable, several listeners, and ability to set value and get current value.
   Something like:
     let thing = new MyThing('Eric', (a,b)=>a===b);
     PRINT(thing.get());
     thing.addListener(x=>console.log("first listener: ",x));
     thing.addListener(x=>console.log("second listener: ",x));
     thing.set(1); thing.set(1); thing.set(1);
     PRINT(thing.get());
     thing.set(2); thing.set(2); thing.set(2);
     PRINT(thing.get());
     thing.set(undefined); thing.set(undefined); thing.set(undefined);
     PRINT(thing.get());
     thing.set(null); thing.set(null); thing.set(null);
     PRINT(thing.get());
   Output should be:
     first listener: 'Eric' (maybe... make it a param?)
     second listener: 'Eric' (maybe... make it a param?)
     first listener: 1
     second listener: 1
     thing.get() = 1
     first listener: 2
     second listener: 2
     thing.get() = 2
     first listener: undefined
     second listener: undefined
     thing.get() = undefined
     first listener: null
     second listener: null
     thing.get() = null

Q: Can I implement push-dirty / pull-clean by subscribe / unsubscribe kind of stuff?
PA: Basically, get() would mean subscribe to 1 event and then unsubscribe (I think)? Hmm, maybe that won't work
    since events will get skipped when no one's listening.
   But if something is *monitoring* a node in the compute graph, that means subscribe,
   and so dirties will automatically get propagated?  Not sure.
PA: read this: http://conal.net/papers/push-pull-frp/

Q: is there something like a conditional or switch operator?
