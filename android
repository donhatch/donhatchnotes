(previous notes currently in ~/wrk/android/NOTES -- need to transfer them)

Q: what's the story on various versions of stuff?
PA: At this moment:
      Android version:
      SDK/API version:
        minSdkVersion: 15
        targetSdkVersion: 26
        compileSdkVersion: 26
        buildToolsVersion (not exactly the same track but the major version is the same): 26.0.3
      AS version: 2.3.1 (upgrading to 3.0.1.0)
      "Android plugin for gradle" version: 2.3.1  (in top-level build.gradle: buildscript.dependencies.classpath 'com.android.tools.build:gradle:2.3.1')
      gradle version: 4.1

Q: how to find out / set what api version is being used, in what senses?
PA:
   Good overview of considerations and advice here: https://developer.android.com/training/basics/supporting-devices/platforms.html

   There seem to be three different values.  (at one point there was also maxSdkVersion that defaulted
   to targetSdkVersion, but I think that's defunct.)

   The api version related settings in File->Project_Structure->Modules->app->Properties
   correspond to those in app/build.gradle,
   and submenus correspond to variables within that file.
   Updating in AS automatically updates the gradle files,
   and updating the gradle files causes AS to notice as soon as you try doing anything nontrivial,
   and it offers to sync.  Alternatively, sync using Tools->Android->Sync_Project_With_Gradle_Files.

     app/build.gradle android.compileSdkVersion
       File->Project_Structure->Modules->app->Properties->Compile_Sdk_Version->"API 25: Android 7.1.1 (Nougat)"
       Library used to compile.
       Advice is "it is strongly recommended that you always compile with the latest SDK.".
       To change it, even if the desired one hasn't been downloaded yet,
       change it in app/build.gradle and try to compile/run in AS; it will offer option to install

     app/build.gradle android.defaultConfig.minSdkVersion
       File->Project_Structure->Modules/app->Flavors->defaultConfig->Min Sdk Version->"15"
       Minimum required to be on the machine in order to install and/or run the app.


     app/build.gradle android.defaultConfig.targetSdkVersion
       File->Project_Structure->Modules/app->Flavors->defaultConfig->Target Sdk Version->"15"
       Vaguely: highest level I've tested it on and am guaranteeing it works on.
       Q: Advice is "To allow your app to take advantage of these changes and ensure that your app fits the style of each user's device, you should set the targetSdkVersion value to match the latest Android version available."  I don't understand this.

  Q: what constraints should I follow among these levels?
  A: per https://medium.com/google-developers/picking-your-compilesdkversion-minsdkversion-targetsdkversion-a098a0341ebd :
     minSdkVersion <= targetSdkVersion <= compileSdkVersion
     but ideally, more like this in steady state:
     minSdkVersion (lowest possible) <= targetSdkVersion == compileSdkVersion (latest SDK)
     "Youâ€™ll hit the biggest audience with a low minSdkVersion and look and act the best by targeting and compiling with the latest SDK".
     (and I think compileSdkVersion should be <= buildToolsVersion, too)

  Q: how does this relate to the <uses-sdk> stuff in the manifest?
  PA: hmm, https://medium.com/google-developers/picking-your-compilesdkversion-minsdkversion-targetsdkversion-a098a0341ebd seems to imply that AndroidManifest.xml is autogenerated?

   Here's some explanation, but it's not exactly android studio? https://developer.xamarin.com/guides/android/application_fundamentals/understanding_android_api_levels/
   Here's some more explanation: https://developer.android.com/guide/topics/manifest/uses-sdk-element.html
     but its talking about the manifest file?  Is that different?
     and it has min,target,max

  Example of subtlety (from https://developer.android.com/training/basics/supporting-devices/platforms.html#version-codes):
    Let's say I compileSdkVersion > minSdkVersion.
    Then I might want to put a runtime condition that only
    uses a certain function when the current sdk version is >= when the function
    was introduced.

Q: what is buildToolsVersion (e.g. '26.0.1') in app/build.gradle? (mirrors File->Project_Structure->Modules/app->Properties->Build_Tools_Version)
A: https://stackoverflow.com/questions/24521017/android-gradle-buildtoolsversion-vs-compilesdkversion#answer-24523113
   "buildToolsVersion is the version of the compilers (aapt, dx, renderscript compiler, etc...) that you want to use. For each API level (starting with 18), there is a matching .0.0 version."
   "You can use a higher version of the build-tools than your compileSdkVersion, in order to pick up new/better compiler while not changing what you build your app against."
   per https://developer.android.com/studio/releases/build-tools.html:
   "If you're using Android plugin for Gradle 3.0.0 or higher, your project automatically uses a default version of the build tools that the plugin specifies. To use a different version of the build tools, specify it using buildToolsVersion in your module's build.gradle, as follows: ..."

Q: ok then whats the "android plugin for gradle 3.0.0 or higher"? where is that specified?
PA: per https://developer.android.com/studio/releases/gradle-plugin.html:
   "You can specify the Android plugin for Gradle version in either the File > Project Structure > Project menu in Android Studio, or the top-level build.gradle file."
   The latter is apparently buildscript.dependencies.classpath = 'com.android.tools.build:gradle:2.3.1' for
   one of my projects currently.
   gag, and there's a correspondence between plugin version and required gradle version,
   e.g. gradle plugin version 3.0.0+ requires gradle version 4.1+.
   Actually, it seems to be correlated with the version of AS (e.g. I'm running AS 2.3.1 right now
   and it says its using android plugin for gradle 2.3.1 ... and when I try changing that to 3.0.0 it barfs).
   Per https://developer.android.com/studio/releases/gradle-plugin.html#3-0-0:
   "The Android Studio build system is based on Gradle, and the Android plugin for Gradle adds several features that are specific to building Android apps. Although the Android plugin is typically updated in lock-step with Android Studio, the plugin (and the rest of the Gradle system) can run independent of Android Studio and be updated separately."
   I don't quite get it... this is a *gradle plugin* called "android plugin for gradle"?
   Note, it seems to be getting faster and faster, per that page, so its good to keep updated to latest.

Q: ok then how do I find out what gradle version I'm using?
A: per that same page:
   "You can specify the Gradle version in either the File > Project Structure > Project menu in Android Studio, or by editing the Gradle distribution reference in the gradle/wrapper/gradle-wrapper.properties file."
   apparently I'm using:
     android plugin version 2.3.1
     gradle version 4.1

Q: how do I update AS to latest?
A: Android Studio -> Check for Updates...
   it says 3.0.1 is available.  downloading it.


Q: how do I change deployment target?
A: Do both of the following:
     - hit the Stop button if it's running
     - if "Use same device for future launches" is checked, uncheck it (at least temporarily):
         Run -> Edit configurations... -> Android App -> app -> Deployment Target Options -> Target -> uncheck "Use same device for future launches"
Q: how do I remove a deployment target from dialog listing candidates for Run?
A: It shows connected devices (probably no way to prevent that) and available virtual devices.
   If I want to remove an available virtual device, that would probably be done through AVD Manager: select the virtual device and Actions -> Wipe Data (I haven't tried it).

Q: What's the point of local broadcasts?  If "local" means "within same process,
   couldn't I accomplish the same thing easier with an actual method call?
A:

Q: how to disable instant run when I hit Run?
A:  Preferences -> Build, Execution, Deployment -> Instant Run -> uncheck Enable
Q: What's my problem with Instant Run?  Can I reproduce it?

Q: what's the relationship between Instant Run and "Apply Changes" (the button next to the Run button)?
PA: https://stackoverflow.com/questions/43488453/run-app-vs-apply-changes-android-studio-2-3#answer-43500455
   Run used to use "Instant Run" if enabled... but now there's a separate button for it?
   But then what does the enabled switch do?  I'm confused.
   Oh, I guess it just enables/disables "apply changes".  Weird, doesn't seem very useful.


Q: what files should I commit to git for an android studio project?
PA: - well, googlesamples/android-DrawableTinting does it, but I think its file list is excessive.
    - https://medium.com/@jagonzalez.develop/how-manage-android-plugin-for-gradle-version-in-a-team-df66b904c6b2
      has something about managing Android Plugin for Gradle version,
      since "(almost) all AS upgrades need you to upgrade Android Plugin for Gradle version in main build.gradle file".


Q: kotlin?
A: see kotlin notes

Q: how the heck do I set the icon?
PA: various docs and stackoverflow answers say things like:
      right-click on res -> New Image Asset, and replace android:icon="@drawable/ic_launcher" with android:icon="@drawable/myicon" in app/src/main/AndroidManifest.xml
    I tried that, and it didn't work-- it didn't put anything in drawable.
    But it put stuff in various mipmap-* directories,
    so I said android:icon="@mipmap/ic_launcher" and it worked.
    BTW, api level 26 introduced a much more complicated icon creation:
    "adaptive and legacy", with foreground and background,
    that makes it hard to make the background transparent.  So I chose
    "legacy only" in asset studio, it makes it easier and creates fewer files.
    Note, I had to regenerate the asset when level 26 came,
    because the old one was missing xxxdpi files (I think).
    (XXX argh, I think it's actually that level 26 *requires* the adaptive ones)
    (XXX and it looks like when I ask for that, it creates drawable/typewriter_el_background.xml but nothing for foreground or without-_background-or-_foreground?? is that a bug?)
Q: how do I make the icon partially transparent?
   for "legacy" icon (used by targetSdkLevel<=25), I could do it by setting
   shape type to None.  Don't know how any more.
   (TODO: read the extensive doc about adaptive icons; it should explain)


Q: what does it mean when the Run (play) button in Android Studio has a little
   dot in its lower right?
A: per https://stackoverflow.com/questions/40998073/android-studio-what-does-the-green-dot-mean-in-the-run-button#answer-40998217,
   it means it's running.
   Oh!  I think I neglected to set the Name (I set foreground and background layer name, that wasn't adequate)
