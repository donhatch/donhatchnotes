References:
  "X Selections, Cut Buffers, and Kill Rings." by Jamie Zawinski
  https://www.jwz.org/doc/x-cut-and-paste.html

  great page on X clipboard
  http://www.freedesktop.org/wiki/Specifications/ClipboardsWiki

  https://en.wikipedia.org/wiki/X_Window_selection

  https://tronche.com/gui/x/icccm/sec-2.html

  https://wiki.ubuntu.com/ClipboardPersistence

  "responsibilities of clipboard managers, responsibilities of clipboard owners", distilled from the icccm thing I think
  https://freedesktop.org/wiki/ClipboardManager/

  And some stuff about spying on it here, including an example of "here, xsel took over the selection from xclip".
  Fascinating, those programs fork into background and stick around until someone else wants to own the clipboard!  Didn't realize that.
  Also shows how to see who owns a given selection (but for xprop and xwininfo, doesn't show much... but can drill more in other ways; see below):

  https://unix.stackexchange.com/questions/139191/whats-the-difference-between-primary-selection-and-clipboard-buffer
  https://unix.stackexchange.com/questions/213840/how-to-toggle-or-turn-off-text-selection-being-sent-to-the-clipboard#answer-213843
  https://askubuntu.com/questions/12047/inconsistent-copy-and-paste-behaviour-is-there-a-fix

On Linux/X:

  A good way to monitor PRIMARY and CLIPBOARD (no one really uses SECONDARY for anything):
    watch -n 0.25 'echo -n '"'"'PRIMARY/"select": '"'"'; xclip -o -sel p; echo; echo -n '"'"'CLIPBOARD/"copy": '"'"'; xclip -o -sel c; echo; date "+%Y-%m-%dT%H:%M:%S.%N%:z"'
      (note that it says "Every 0.2s" but it's lying)
      (note, do *not* use --precise, since that freezes for a while after dragging window resize)
    for ((n=1;;n++)) do echo $n; done | watch -n 0.25 'read n; echo -n '"'"'PRIMARY/"select": '"'"'; xclip -o -sel p; echo; echo -n '"'"'CLIPBOARD/"copy": '"'"'; xclip -o -sel c; echo; echo -n "$n: "; date "+%Y-%m-%dT%H:%M:%S.%N%:z"'
    for ((n=1;;n++)) do echo $n; done | watch -n 0.25 'read n; echo -n '"'"'PRIMARY/"select": '"'"'; xclip -o -sel p; echo; echo -n '"'"'CLIPBOARD/"copy": '"'"'; xclip -o -sel c; echo; echo -n "count=$n pid=$$ "; date "+%Y-%m-%dT%H:%M:%S.%N%:z"'
    for ((n=1;;n++)) do echo $n; done | watch -n 0.25 'read n; echo -n '"'"'PRIMARY/"select": '"'"'; xclip -o -sel p; echo; echo -n '"'"'CLIPBOARD/"copy": '"'"'; xclip -o -sel c; echo; xprop -notype -root CUT_BUFFER0; echo -n "count=$n pid=$$ "; date "+%Y-%m-%dT%H:%M:%S.%N%:z"'

  Here's the story.

  xclip -i (default) or -o:
    -sel p[rimary] (default)
    -sel s[econdary]
    -sel c[lipboard]
  xsel -o (default) or -i:
    -p (primary) (default)
    -s (secondary)
    -b (clipboard)  (because -c means clear; argh)
  vim (from help; good more complete info here, involving its use of CUT_BUFFER0 which it uses as a kind of backup)
    :help clipboard
    :help x11-selection
    :help x11-cut-buffer
    "* is PRIMARY (sort of. yanking into it writes to PRIMARY (which is handed over to gpaste-daemon if running), pasting from it gets from PRIMARY if it exists, else CUT_BUFFER0)
    "+ is CLIPBOARD (sort of. yanking into it writes to CLIPBOARD (which is handed over to xclipboard or gpaste-daemon (in preference order) if running), pasting from it gets from PRIMARY if it exists, else CUT_BUFFER0)
    - writes contents of any owned selection to CUT_BUFFER0, and releases it, when exiting or becoming suspended.  but doesn't restore anything on start or resume.
      to see what's in CUT_BUFFER0: xprop -notype -root CUT_BUFFER0
      Also, when that happens, if gpaste-daemon is running, even if it didn't previously own anything,
      it grabs ownership of PRIMARY and copies CLIPBOARD to it (rude! wtf?)
    - for a while I thought I was observing vim CLIPBOARD (if neither xclipboard nor gpaste-daemon is running), but now I'm observing it immediately hands any "+ yank into a background `xsel --logfile /dev/null -i --clipboard`.  weird.

  gnome-terminal
    dragging out or double-clicking to select puts it into PRIMARY
    middle-clicking to paste gets it from PRIMARY
    shift-ctrl-c copies from highlighted (if any, in which case it's in PRIMARY) to CLIPBOARD
    shift-ctrl-v pastes from CLIPBOARD

  xterm
    like gnome-terminal, presumably... except selecting puts it in both PRIMARY and CUT_BUFFER0  (learned this from vim: :help x11-cut-buffer)

  chrome (and other gui apps, no doubt):
    in url bar:
      single-clicking highlights the whole url but does *not* put it in PRIMARY nor CLIPBOARD (confusing!) and puts it in a state where ctrl-a doesn't put it there either
      single-clicking again in url (when already highlighted) changes to single cursor; then ctrl-a works (but shift-ctrl-a doesn't unhighlight or anything)
      ctrl-c when initially all highlighted puts highlighted into PRIMARY and CLIPBOARD
      starting to type sends it into a bizarre hard-to-describe state machine, in which sometimes ctrl-a does something and sometimes it doesn't  XXX try to nail this down and describe it
      dragging out a selection does nothing til release; on release, it gets put in PRIMARY

    on page:
      single-clicking does nothing to any selection buffer
      selecting (by dragging-out or double- or triple-clicking or things like ctrl-a) puts it in PRIMARY only.  when dragging, it goes into PRIMARY continuously with each new character
      ctrl-c copies highlighted to both PRIMARY (if it's not already there, e.g. someone clobbered it or it was highlighted without putting it there, e.g. by single-clicking) and CLIPBOARD
      ctrl-x is like ctrl-c but also deletes the text if editable
      ctrl-v pastes from CLIPBOARD if editable
      middle-clicking pastes from PRIMARY if editable

    Note: single clicking on URL (or ctrl-a on it) highlights/selects but doesn't
    put it *anywhere*! If you want it in primary, you have to either:
        - ctrl-a or triple-click to get it in PRIMARY
        - ctrl-c (or ctrl-x) to get it in both PRIMARY and CLIPBOARD

  "Clipboard managers": these all kind of suck, except for my "watch" invocation above.
    - glipper:
      - this is the only one that tracks PRIMARY (which it calls the "select" clipboard) as well as CLIPBOARD (which it calls the "copy" clipboard).
      - clicking on the applet (or typing ctrl-alt-c) shows a muddle of histories of PRIMARY and CLIPBOARD.
      - I think whenever something changes (PRIMARY or CLIPBOARD), it puts it at the top of the list
      - CLIPBOARD ("copy") is in bold with a bullet
      - clicking on any item puts that in both PRIMARY and CLIPBOARD (and makes the list disappear-- complete ui failure right there)
      - you have to killall it to make it exit
    - parcellite:
      - tracks CLIPBOARD only.
      - clicking on an item in history puts it in only CLIPBOARD.
      - claims to have -p(rimary) option, but I haven't seen that do anything.
        in fact I have no idea what any of the examples in the man page are doing.  seems overall pretty unusable.
      - hmm, when I kill an "xsel --logfile /dev/null -i --clipboard" that's holding CLIPBOARD in the background,
        the watch shows CLIPBOARD temporarily disappears, but then parcellite restores it and takes it over!
        similarly if I suspend exit a vim that's holding CLIPBOARD (don't know why it does sometimes).
    - xfce4-clipman
      - tracks CLIPBOARD only.
      - clicking on an item in history puts it in both PRIMARY and CLIPBOARD.
    - diodon
      - tracks CLIPBOARD only.
      - clicking on an item in history puts it in only CLIPBOARD.
    - klipper
      - seems to be broken on recent ubuntu
      - didn't exist on even later ubuntu; I installed it as part of plasma-workspace, but that was a big mistake; subsequently purged it
      - hmm, there's this: https://github.com/yshui/klipper, with description:
         "Klipper is arguably the best clipboard management tool on Linux.
          Unfortunately klipper can only installed as part of plasma-workspace. which will pull in a large part of KDE.
          What I did here is split klipper out of plasma-workspace.
          There're still some dependency on kde-frameworks, but this is way better than before."
        No idea how to build it, though.
    - xclipboard
      - usually fails to start, with "Error: another clipboard is already running"
        (temporariliy killing /usr/lib/x86_64-linux-gnu/cinnamon-settings-daemon/csd-clipboard seems to help;
         not sure what that process is)
      - omg this interface is awful
      - tracks CLIPBOARD only
      - each time something gets put in CLIPBOARD, 2 entries are appended (wtf?)
      - cycling Next and Prev immediately puts that in CLIPBOARD
      - grabs ownership of CLIPBOARD when it starts
    - `gpaste-client ui`
      - install:  `sudo apt install gnome-shell-extensions-gpaste gpaste`,  then alt-f2 r
         but I don't see any tray icon :-(
         and the advice to use gnome-tweak-tool -> Extensions doesn't work, there is no Extensions

"

  Q: is it possible to listen for changes to PRIMARY and CLIPBOARD, rather than the busy-wait "watch" loop I show above?
  PA:
    on android: https://stackoverflow.com/questions/22277598/permanently-listen-to-clipboard-changes#answer-22287217
    in pygtk, this claims to have it but it's wrong: https://askubuntu.com/questions/25964/how-to-check-if-clipboard-contents-have-changed-from-a-script-other-than-pollin
    python3 and Xlib module have all X stuff, if I can find the call...
    something about PropertyNotify or SelectionClear or SelectionRequest or SelectionNotify?  (see https://www.x.org/releases/X11R7.7/doc/xproto/x11protocol.html#events:PropertyNotify) ... I don't think so.
    I'm getting the feeling it can't be done.
    Oh wait, there is an "XFIXES" extension mentioned on https://freedesktop.org/wiki/ClipboardManager/ ?
    and here:
    https://stackoverflow.com/questions/26161916/listen-for-xsetselectionowner#answer-26170965
    Specifically SelectSelectionInput
    Try this example program to use xfixes:
      https://github.com/python-xlib/python-xlib/blob/master/examples/xfixes.py
    Ok, screen.root.xfixes_select_selection_input() was added only recently (2019/05/19),
    so it's not in my installed version.  rustrating :-(
    Actually more direct example here:
      https://github.com/python-xlib/python-xlib/blob/a21842a7ba64316401f3a22fa0de493b7f4d8aa6/examples/xfixes-selection-notify.py
    But still, not supported yet in my version; it gives:
      AttributeError: module 'Xlib.ext.xfixes' has no attribute 'XFixesSetSelectionOwnerNotifyMask'
      import Xlib.ext.xfixes
      dir(Xlib.ext.xfixes)
        ['HideCursor', 'QueryVersion', 'ShowCursor', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'extname', 'hide_cursor', 'init', 'query_version', 'rq', 'show_cursor']
    So I think I have to do it in C/C++ for now.
    Gag, there's a dearth of examples, even in C/C++ :-(
    Okay maybe this?
      https://www.youtube.com/watch?v=dda4xLYx0XM
      That refers to https://github.com/cdown/clipnotify
      But it seems to me it has a race.  I filed a bug.

  Q: wait a minute!  strace xclipboard is waiting nicely, not busy-waiting!  how's it doing that?
  A: oh I see, it always grabs ownership of CLIPBOARD, and waits til someone else takes it away before waking up and grabbing it back.
     So that doesn't tell us how to wait non-intrusively.

  Q: but then what is glipper doing??  It actually notices when PRIMARY or CLIPBOARD changes, but without owning it!

  Q: how to see what process *owns* PRIMARY and CLIPBOARD?  (note, it may not even be on the local machine)
  PA:   Start here: https://unix.stackexchange.com/questions/368775/how-do-command-line-clipboard-tools-like-xclip-and-xsel-persist-the-clipboar

  Q: is there a way to map from window id to process, to aid with that?
  PA:
    - `xdotool getwindowpid <id>` does it, but relies on the _NET_WM_PID property (same as `xprop -id <id>`)
    - `xlsclients -a -l` and `wctrl -lp` shows some stuff (even remote) but not pids, and the xclip/xsel window doesn't apper
    - some hints here:  https://unix.stackexchange.com/questions/5478/what-process-created-this-x11-window#answer-84981
        particularly the `xwininfo -root -tree` trick, but it's all just hints really; the "xsel" or "xclip -i" that owns the selection generally just has a 1x1+0+0 window that's a direct child of the root
        whoa, and then there's a way to do it for hackers.
        https://stackoverflow.com/questions/37283179/python-pid-to-x11-window-id-using-xresqueryclientids  for more info on an extension that may help.
        specifically, XResQueryClientIds in extension X-Resource 1.2.
        yes! had to install libxcb-res0-dev in order to compile the program; calling it windowid_to_pid.
        then:
          watch -n 1 './who_owns_selection PRIMARY; ./windowid_to_pid $(./who_owns_selection PRIMARY); ./who_owns_selection CLIPBOARD; ./windowid_to_pid $(./who_owns_selection CLIPBOARD)'

        unfortunately, in the case of xsel, the process has exited... BUT, can find it by psgrepping for numbers after that; it's usually 2 (but I've seen as many as 4) processes later:
          psgrep 76129
          psgrep 76130
          psgrep 76131
            1 S donhatch  76131      1  0  80   0 -  5578 x64_sy 02:58 ?        00:00:00 xsel
        and in the case of xprop -i, it's 1 or more processes later:
          psgrep 79328
          psgrep 79329
            1 S donhatch  79329      1  0  80   0 -  8844 x64_sy 03:00 pts/36   00:00:00 xclip -i

        TODO: make a python program, using some xcb wrapper (xpyb? xcffib which is "a drop in replacement for xpyb"?) that does all this nicely:
          - queries what window id owns the selection
          - maps that window id to process id
          - prints the process command (maybe searching several pids later?), using ps -f -p <pid>, maybe
        Ok, got something:
          watch -n 1 'pwid=$(./who_owns_selection PRIMARY);   ppid0=$(./windowid_to_pid $pwid 2>&1 | awk '"'"'{print $2}'"'"'); ppid=$ppid0; while kill -0 "$ppid" 2>&1 | grep "No such process" > /dev/null; do let ppid++; done; echo -n "  PRIMARY: id=$pwid pid=$ppid0+$(($ppid-$ppid0)) = $ppid "; ps -f -p $ppid -o command | tail -1; \
                      cwid=$(./who_owns_selection CLIPBOARD); cpid0=$(./windowid_to_pid $cwid 2>&1 | awk '"'"'{print $2}'"'"'); cpid=$cpid0; while kill -0 "$cpid" 2>&1 | grep "No such process" > /dev/null; do let cpid++; done; echo -n "CLIPBOARD: id=$cwid pid=$cpid0+$(($cpid-$cpid0)) = $cpid "; ps -f -p $cpid -o command | tail -1'

  Q: how the hell do I copy-paste from a terminal window into acroread??
     problem is copying from terminal window only puts it into PRIMARY
         (no access to CLIPBOARD I don't think)
     and acroread only pastes from CLIPBOARD
         (no access to PRIMARY I don't think).
  PA: klipper and parcellite have options for "synchronize contents
      of clipboard and selection", but they aren't great
      since they short-circuit the ctrl-c/ctrl-v functionality
      of programs like chrome.
  A: Use xclip:
       sh -c 'xclip -o -sel p | xclip -i -sel c'
       xclip -o -sel p | xclip -i -sel c
       xclip -o -sel p | xclip -sel c
     Or use xsel (this doesn't work as a keyboard shortcut for some reason!?)
       sh -c 'xsel | xsel -b'
       xsel | xsel -b
     Or use vim:
        - "+yy or whatever to yank into clipboard.
        - :let @+ = @*
     Or click on glipper (or ctrl-alt-c) which will bring up sort-of-history in which PRIMARY is first, click on that
     (or anything else in the history) to put it in both PRIMARY and SECONDARY

     To make a keyboard shortcut for it:
       Settings -> Preferences -> Keyboard -> Shortcuts -> Add custom shortcut
Name: copy primary to clipboard
Command: sh -c 'xclip -o -sel p | xclip -i -sel c'
         double-click on one of the "unassigned"s, and type in the desired accelerator (e.g. super-c)
     (not sure how to do it from command line; neither gsettings nor dconf seem to work, despite various web advice)

  Q: copy something from a cmd or console2 on windows...
     can paste it back,
     but can NOT paste it into thunderbird on linux (through synergy).
     but, can paste it into gnome-terminal on linux (through synergy),
     then copy-paste it from there to thunderbird.  what the fuck??
     Really need to monitor what's happening to get a clear idea of how things work.
     TODO: revisit this using the "watch" command to see what's going on


Q: (linux) when I've selected lots,
   how do I paste it?  the following methods suck:
    cat >> myfile, and paste
            prematurely eofs, giving lots of errors
    vim myfile, and paste
            takes a ridiculously long time... O(n^2)?
A: A couple of nice ways:
     - xclip:
         echo foo | xclip
         xclip -o > outfile
     - vim:
         "*p
         "+p


Q: is SECONDARY interesting?
PA: not sure.  see http://www.cs.man.ac.uk/~lindsec/secondary-selection.html
    also the proposal on https://www.freedesktop.org/wiki/Specifications/ClipboardsWiki/ which I need to think more about, I think

Q: I think a program like xclipboard needs to be running in order to make all this work?
   (See NOTES at bottom of xsel man page).  There's no xclipboard running,
   but when I run it, it says "Error: another clipboard is already running".
   What's that other program?
PA: `psgrep clip` shows:
   /usr/lib/x86_64-linux-gnu/cinnamon-settings-daemon/csd-clipboard
   when I kill that, it allows xclipboard to run (and reveals that it's just another incomprehensible gui, see notes earlier)
   and killing it doesn't prevent the general primary/clipboard behavior from happening, so I don't really get what's being said.
PA: conjecture: it's a clipboard manager as mentioned in various places (e.g. the vim help pages),
    that takes over when a process holding the selection exits without handing it over to anyone.
    Q: Can I prove that?
    A: yes.
       - if xclipboard is the one holding the CLIPBOARD selection, and I quit from it, then the selection disappears, according to the `watch` invocation:
                Error: target STRING not available
       - if I kill the `xsel` or `xprop -i` process that's holding either selection (e.g. after `date | xsel` or `date | xprop -i`),
         then the selection disappears.
       - if vim is holding PRIMARY and/or SECONDARY, and no clipboard managers are running, then both PRIMARY and CLIPBOARD get lost on vim exit.
         but:
          - if csd-clipboard is running, vim behavior doesn't seem to change
          - if xclipboard is running, vim hands CLIPBOARD selections over immediately to it, so that doesn't get lost on exit (but PRIMARY still does)
          - I *thought* I saw: if glipper is running, vim hands CLIPBOARD over to a process that no longer exists, then `./windowid_to_pid $(./who_owns_selection CLIPBOARD)`
            shows that, a few processes later, there's something like `xsel -i -somethingsomething /dev/null` .  But I'm having a hard time reproducing.
            OH! something wrote that, when vim owned both PRIMARY and SECONDARY and then suspended!
            no wait, I think vim sometimes immediately writes clipboard to that!   but sometimes it doesn't. I'm confused.
          - hmm, and now that I installed gpaste, gpaste-daemon is also in the mix, grabbing PRIMARY and/or CLIPBOARD
            and doing sometimes rude things with them (e.g. when vim exits, it grabs ownership of PRIMARY)
            and copies CLIPBOARD into it!?)

Q: who started gpaste-daemon?  (I installed gpaste explicitly, but I'm not sure what that set in motion)
A: it gets started automatically when I run "gpaste-client ui"

On Windows:
    Clipboard stack would be nice.
    People have suggested:
        ClipX
        Clipmate (not free)
        ClipBoard Diary
        clipmagic
        Ditto
        PureText (has "paste as unformatted)
        Yankee Clipper
        something using AutoHotKey
        gpaste
    A bunch of them described here: http://www.nonags.com/nonags/clipb.html

    But... do we really need a menu?
    How about just ctrl-v going back through the stack
    and something else going forward through it? hmm.
    no wait, ctrl-v ctrl-v ctrl-v pastes 3 times, so that doesn't work.

    How bout this:
        ctrl-v pastes and leaves nothing selected, as usual
        ctrl-shift-v pastes and leaves the pasted thing selected,
            so that ctrl-shift-v again can replace it with previous
            thing in clip history, etc.?
            and then should releasing shift make deselect?
    See this:
        http://www.autohotkey.com/board/topic/10576-a-simple-clipboard-stack-kill-ring/
        post on 24-March-2009 says he's tried almost every clipboard manager out there and very few allow this basic funcionality, and those who do implement it horribly.

    AutoHotKey-based:
        This page:
            http://www.autohotkey.com/docs/misc/Clipboard.htm
        lists a couple of ahk-based ones:
            Deluxe Clipboard
            ClipStep (note, the version here seems to work for me on vista;
                      the one on donationcoder.com has more menus and About
                      but doesn't seem to work (paste claims there's no clip)
                BUT interacts poorly with cygwin,
                in which ctrl-c and ctrl-v don't mean copy and paste!
                so, guess I can't use this?  :-(

On Mac:
  Generally cmd-c to copy and cmd-v to paste, cmd-x to cut.
  To view clipboard contents: Finder->Edit -> Show Clipboard
==========================================================================
