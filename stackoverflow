===================================================================
http://stackoverflow.com/questions/6033781/how-to-avoid-python-fileinput-buffering#answer-6033880
My addition:
  @AaronDigulla , if you are on linux/bash, please try the following two commands. First command: `(seq 3;sleep 1) | python2.7 -c $'import sys\nfor line in sys.stdin:\n sys.stdout.write(line)'`  Second command: `(seq 3;sleep 1) | python2.7 -c $'import sys\nwhile True:\n line = sys.stdin.readline()\n if not line:break\n sys.stdout.write(line)'`  For me, the first command behaves badly (pauses for 1 second before the output) whereas the second behaves as expected (pauses for 1 second after the output). This reality seems incompatible with your claims, no? And adding -u doesn't help.

        
  @AaronDigulla I don't know what you mean by "the real effect" but I believe it's beside the point. My point is: I give an example of an input program (namely (seq 3; sleep 1)) which, by some means whose details are irrelevant, definitely gets data into the python script immediately, as evidenced by the second run. Nothing is different between the two runs except the contents of the python scripts-- therefore the first python script sees the data immediately too. But it does nothing with it until more is read-- so something inside python is withholding those lines, contrary to your claim. 

  @AaronDigulla BTW I tend to agree with you that this kind of input buffering "doesn't make sense".  In fact the nonsensicality of it caused me to waste many hours-- I thought the previous program in the pipeline must be withholding output, since I couldn't even conceive of the possibility that the python program would do something so heinous-- and yet it definitely does it.  I am now going through all my python programs, replacing "for line in sys.stdin:" with "while True:\n line = sys.stdin.readline()\n if not line:break" and a comment "DO NOT EVER USE 'for line in sys.stdin', IT WILL RUIN YOUR DAY".

  @AaronDigulla That's possible, but I'm relatively sure that it's you who do not understand the situation. Your answer is simply wrong: there is no output buffering happening in the situation the OP posted-- to me, this is quite obvious from the fact that the problem can be fixed by changing the python code to use readline() instead of fileinput or 'for line in sys.stdin'. But if, in spite of that, you still think there's output buffering relevant to this story, run strace on the python program. It shows that you're simply wrong. John and I have been repeatedly telling you the same thing. – Don Hatch Feb 2 at 1:46   

  @AaronDigulla tried what exactly-- calling python with -u? Yes, I've tried it; have you? I found that it doesn't change the unfriendly extra input buffering behavior of for line in fileinput.input(): nor of for line in sys.stdin:. Note also that the documentation quoted there (beginning with "Note that there is internal buffering in...") appears to be talking about this extra input buffering behavior that John and I are describing, and suggests the same workaround that both John and I are using: that is, use readline() since it doesn't have the unfriendly input buffering behavior. – Don Hatch Feb 2 at 11:51   

  @AaronDigulla I see that, but I'm not sure *why* you're talking about buffering between processes. As far as I can see, your answer is simply incorrect (starting with "it's not python that's buffering but the shell") and not relevant to the question at all, and you've spent a large part of this comment thread making and defending claims that aren't true either (e.g. your "Conclusion: What you experience must have another cause. It's not related to readline() or readlines() in Python."). I believe you have the ability to delete this whole answer and thread... maybe that would be a good idea? – Don Hatch 48 secs ago    edit   

  [deleted]


===================================================================
http://stackoverflow.com/questions/2342826/how-to-pipe-stderr-and-not-stdout#answer-2381643
My additions:

  @user48956 - I'm adding `/etc/passwd` to your command so it'll have non-empty stdout, to make things clearer.  If your mind is like mine, you're assuming your `ls -l /etc/passwd not_a_file 3>&1 1>&2 2>&3 > errors.txt` should give you the same as `(ls -l /etc/passwd not_a_file 3>&1 1>&2 2>&3) > errors.txt`, which is wrong.  You can get the latter if desired by typing exactly that.  On the other hand if your goal is simply to redirect 2 to a file, that's way easier: `ls -l /etc/passwd not_a_file 2> errors.txt` .

  @user48956 - To understand what your proposed command `ls -l /etc/passwd not_a_file 3>&1 1>&2 2>&3 > errors.txt` actually does, start by following Kramish's description; by the end of it, you've effectively swapped 1 and 2 which in this case isn't very interesting since they were originally both pointing at the terminal, so again they both point at the terminal. Your final `> errors.txt`, i.e. `1> errors.txt`, means the prog's output 1 (listing /etc/passwd) gets finally redirected to errors.txt, with its output 2 (complaining about not_a_file) still pointed at the terminal.
===================================================================
http://stackoverflow.com/questions/2342826/how-to-pipe-stderr-and-not-stdout#answer-2342841
My addition:
  @KurtPfeifle I'm amused by "we have to read from right to left" and "no, we must read from left to right".  Both statements are wrong, of course, since there are valid interpretations that could reasonably be labelled each way.  Personally my brain always wants `command $a>&$b $c>&d $e>&$f` to do `((command $a>&$b) $c>&d) $e>&$f` (i.e. "left-to-right" in a sense), but that's wrong.  Instead, it does `((command $e>&$f) $c>&d) $a>&$b` (i.e. a "right-to-left" reading of the unparenthesized pipeline, in a sense).  Others have given "left-to-right" explanations which are valid as well.
===================================================================
Q: what should printf("%.17g\n", .1) print?
http://stackoverflow.com/questions/39652130/what-should-printf-17g-n-1-print
===================================================================
