http://reactivex.io/rxjs/
http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html

"The introduction to Reactive Programming you've been missing"
https://gist.github.com/staltz/868e7e9bc2a7b8c1f754
(but double-click examples have gone stale)

http://stackoverflow.com/questions/33324227/rxjs-how-would-i-manually-update-an-observable

NOTES:
  - "The Observable object represents a push based collection."
    Not sure it's going to be useful for push-dirty pull-clean stuff I want to do.

  - Seems like all the examples on recognizing a double click
    have gone stale and no longer work.
    See http://stackoverflow.com/questions/37310640/rxjs-buffer-how-to-group-multi-click-events-as-stream

  - Sorry, it's a train wreck.  I have no idea how to select from the zillions of options:
        Subject
        BehaviorSubject
        Variable
    and even less idea how to chain them together the way I want.
    Screw this.
    I think Kefir is what I want!

QUESTIONS:

Q: How do I find doc and good example of each thing?
   For example, BehaviorSubject. If I google it or click on the link to it in doc, I just get this:
     http://reactivex.io/rxjs/class/es6/BehaviorSubject.js~BehaviorSubject.html

Q: can I put a BehaviorSubject downstream from a distinctUntilChanged?

Q: How do I implement a simple Observable value
   that supports addListener() (to listen to value changes) and set()?
PA:
   Here's one that emits even on non-changes:
    let subject = new Rx.Subject();
    subject.subscribe(x=>console.log("first listener: ",x));
    subject.subscribe(x=>console.log("second listener: ",x));
    subject.next(1);
    subject.next(10);
    subject.next(100);
    subject.next(100);
  To emit only on changes:
    let subject = new Rx.Subject();
    let subjectChanges = subject.distinctUntilChanged((a,b)=>a===b);
    subjectChanges.subscribe(x=>console.log("first listener: ",x));
    subjectChanges.subscribe(x=>console.log("second listener: ",x));
    console.log("subject = ",subject);
    subject.next(1); subject.next(1); subject.next(1);
    subject.next(2); subject.next(2); subject.next(2);
    subject.next(undefined); subject.next(undefined); subject.next(undefined);
    subject.next(null); subject.next(null); subject.next(null);
  Or use BehaviorSubject, which, unlike Subject, has a getValue()
  and emits immediately... but still need to tack on a
  distinctUntilChanged().  Not the most intuitive.
  How about I implement what *I* wanted?
    let MySubject = function(initialValue, equals) {
      let behaviorSubject = new Rx.BehaviorSubject(initialValue);
      let behaviorSubjectChanges = behaviorSubject.distinctUntilChanged(equals);
      return {
        next: (value)=>behaviorSubject.next(value), // XXX use bind or something?
        getValue: ()=>behaviorSubject.getValue(), // XXX use bind or something?
        subscribe: (subscriber)=>behaviorSubjectChanges.subscribe(subscriber), // XXX use bind or something?
      };
    };
    let subject = new MySubject('Eric');
    subject.subscribe(x=>console.log("first listener: ",x));
    subject.subscribe(x=>console.log("second listener: ",x));
    subject.next(1); subject.next(1); subject.next(1);
    subject.next(2); subject.next(2); subject.next(2);
    subject.next(undefined); subject.next(undefined); subject.next(undefined);
    subject.next(null); subject.next(null); subject.next(null);
  But then is it even necessary to piggyback on the existing ones?  How about I write something from scratch?
    let MySubject = function(initialValue, equals) {
      let value = initialValue;
      let underlying = new Rx.Subject();
      return {
        next:  (newValue)=>{if (!equals(newValue, value)) {newValue = value; underlying.next(newValue); },
        subscribe: (subscriber)=>underlying.subscribe(subscriber), // XXX use bind or something?
      }
    }:
  Alternative: make a BehaviorSubject, and maybe tack on a class that remembers its most recently emitted value?
  Or... wait a minute, maybe a Subject -> distinctUntilChanged -> BehaviorSubject?
    (not sure how to hook up the latter)
  What a wreck :-(

  Experimentation in ~/wrk/example0.js

Q: Can I use reactive programming to construct
   a computation flow graph with the usual stuff?
     - dependency graph
     - dirtyness flows downstream
     - getting a value pulls upstream
     - clean intermediate values get cached

Q: Might I want xstream instead?
   https://staltz.com/why-we-built-xstream.html
   https://staltz.com/xstream/
   https://github.com/staltz/xstream
   Superficially, I think I pretty much always want hot/multicast,
   and the small set of operators might be good too.
PA: Interesting, I'd set a value using shamefullySend.
   So, how would I implement a simple model? (like a BehaviorSubject)


Q: might I want to use bacon.js instead?
   It was born out of frustration with rxjs, maybe the same frustration I'm having; see https://github.com/baconjs/bacon.js/issues/383#issuecomment-46904133
   and the blog post/rant it links to: http://nullzzz.blogspot.fi/2011/02/failing-with-rx-js.html
PA: No, it's heavyweight (kefir fixes that though).  Full comparisons here:
    https://stackoverflow.com/questions/33193211/what-are-the-differentiating-features-between-highland-js-kefir-js-and-rx-js
    https://github.com/Reactive-Extensions/RxJS/blob/master/doc/mapping/bacon.js/whyrx.md

Q: might I want to use kefir.js instead?
   The kefir getting-started example here is pretty attractive:
    https://rpominov.github.io/kefir/
   Hmm! I think maybe it's what I want?  They call a simple model a `property`.

   Bacon/Kefir questions:
   Q: Is 'property' what I want?
   Q: Oh wait, the bacon (which is the same thing I think) doc says "There is no getLatestValue method available and will not be either.  You get the value by subscribing to the stream/property (using onValue) and handling the values in your callback.".  So does that mean I can say getValue(), it's just ridiculously verbose?

  






Q: where is Observable's subscribe method documented??? can't find it on http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html

Q: what does `scan<number>` in http://stackoverflow.com/questions/37310640/rxjs-buffer-how-to-group-multi-click-events-as-stream#answer-40037149 ?  That gives an error in chrome 59.
A: It's TypeScript.  Fuck that, it'll require VS, IE.  Even if not, it'll bite me somehow.
